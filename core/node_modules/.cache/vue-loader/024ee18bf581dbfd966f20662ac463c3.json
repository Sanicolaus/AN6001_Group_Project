{"remainingRequest":"D:\\Project\\ChatApp\\client_v3\\core\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Project\\ChatApp\\client_v3\\core\\src\\App.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"D:\\Project\\ChatApp\\client_v3\\core\\src\\App.vue","mtime":1603186115953},{"path":"D:\\Project\\ChatApp\\client_v3\\core\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Project\\ChatApp\\client_v3\\core\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"D:\\Project\\ChatApp\\client_v3\\core\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"D:\\Project\\ChatApp\\client_v3\\core\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Project\\ChatApp\\client_v3\\core\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKDQpib2R5IHsNCiAgcGFkZGluZzogMHB4Ow0KICBtYXJnaW46IDBweDsNCn0NCg0KKiB7DQogIGZvbnQtZmFtaWx5OiBBdmVuaXIgTmV4dCwgSGVsdmV0aWNhIE5ldWUsIEhlbHZldGljYSwgc2Fucy1zZXJpZjsNCn0NCg=="},{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2IA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"App.vue","sourceRoot":"src","sourcesContent":["<template>\r\n  <div :style=\"{background: backgroundColor}\" id=\"app\">\r\n    <beautiful-chat\r\n      :alwaysScrollToBottom=\"alwaysScrollToBottom\"\r\n      :close=\"()=>{}\"\r\n      :colors=\"colors\"\r\n      :isOpen=\"true\"\r\n      :messageList=\"messageList\"\r\n      :messageStyling=\"messageStyling\"\r\n      :newMessagesCount=\"newMessagesCount\"\r\n      :sendMessage=\"sendMessage\"\r\n      :onMessageWasSent=\"onMessageWasSent\"\r\n      :open=\"()=>{}\"\r\n      :participants=\"participants\"\r\n      :showCloseButton=\"true\"\r\n      :showLauncher=\"false\"\r\n      :showEmoji=\"true\"\r\n      :showFile=\"true\"\r\n      :showTypingIndicator=\"showTypingIndicator\"\r\n      :showEdition=\"true\"\r\n      :showDeletion=\"true\"\r\n      :showConfirmationDeletion=\"true\"\r\n      :confirmationDeletionMessage=\"'Are you sure to delete this?'\"\r\n      :titleImageUrl=\"titleImageUrl\"\r\n      @onType=\"handleOnType\"\r\n      @edit=\"editMessage\"\r\n      @remove=\"removeMessage\"\r\n    >\r\n      <template v-slot:header>\r\n        <h2>AI Diagnose Bot</h2>\r\n      </template>\r\n    </beautiful-chat>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport messageHistory from './messageHistory'\r\nimport chatParticipants from './chatProfiles'\r\nimport availableColors from './colors'\r\nimport axois from 'axois'\r\n\r\nfunction sendToRemote(message) {\r\n\r\n}\r\n\r\nexport default {\r\n  name: 'app',\r\n  data() {\r\n    return {\r\n      participants: chatParticipants,\r\n      titleImageUrl: 'https://a.slack-edge.com/66f9/img/avatars-teams/ava_0001-34.png',\r\n      messageList: messageHistory,\r\n      newMessagesCount: 0,\r\n      isChatOpen: true,\r\n      showTypingIndicator: '',\r\n      colors: null,\r\n      availableColors,\r\n      chosenColor: null,\r\n      alwaysScrollToBottom: true,\r\n      messageStyling: true,\r\n      userIsTyping: false\r\n    }\r\n  },\r\n  created() {\r\n    this.setColor('blue')\r\n  },\r\n  methods: {\r\n    sendMessage(text) {\r\n      if (text.length > 0) {\r\n        this.newMessagesCount = this.isChatOpen ? this.newMessagesCount : this.newMessagesCount + 1\r\n          // axios\r\n          //   .post('http://localhost:5000/asked')\r\n          //   .then(response => (console.log(reponse)))\r\n          //   .catch(error => console.log(error))\r\n        this.onMessageWasSent({\r\n          author: 'support',\r\n          type: 'text',\r\n          id: Math.random(),\r\n          data: {text}\r\n        })\r\n      }\r\n    },\r\n    handleTyping(text) {\r\n      this.showTypingIndicator =\r\n        text.length > 0 ? this.participants[this.participants.length - 1].id : ''\r\n    },\r\n    onMessageWasSent(message) {\r\n      this.messageList = [...this.messageList, Object.assign({}, message, {id: Math.random()})]\r\n    },\r\n    setColor(color) {\r\n      this.colors = this.availableColors[color]\r\n      this.chosenColor = color\r\n    },\r\n    showStylingInfo() {\r\n      this.$modal.show('dialog', {\r\n        title: 'Info',\r\n        text:\r\n          'You can use *word* to <strong>boldify</strong>, /word/ to <em>emphasize</em>, _word_ to <u>underline</u>, `code` to <code>write = code;</code>, ~this~ to <del>delete</del> and ^sup^ or ¡sub¡ to write <sup>sup</sup> and <sub>sub</sub>'\r\n      })\r\n    },\r\n    messageStylingToggled(e) {\r\n      this.messageStyling = e.target.checked\r\n    },\r\n    handleOnType() {\r\n      this.$root.$emit('onType')\r\n      this.userIsTyping = true\r\n    },\r\n    editMessage(message) {\r\n      const m = this.messageList.find((m) => m.id === message.id)\r\n      m.isEdited = true\r\n      m.data.text = message.data.text\r\n    },\r\n    removeMessage(message) {\r\n      const m = this.messageList.find((m) => m.id === message.id)\r\n      m.type = 'system'\r\n      m.data.text = 'This message has been removed'\r\n    },\r\n    like(id) {\r\n      const m = this.messageList.findIndex((m) => m.id === id)\r\n      var msg = this.messageList[m]\r\n      msg.liked = !msg.liked\r\n      this.$set(this.messageList, m, msg)\r\n    }\r\n  },\r\n  computed: {\r\n    linkColor() {\r\n      return this.chosenColor === 'dark' ? this.colors.sentMessage.text : this.colors.launcher.bg\r\n    },\r\n    backgroundColor() {\r\n      return this.chosenColor === 'dark' ? this.colors.messageList.bg : '#fff'\r\n    }\r\n  },\r\n  mounted() {\r\n    this.messageList.forEach((x) => (x.liked = false))\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\nbody {\r\n  padding: 0px;\r\n  margin: 0px;\r\n}\r\n\r\n* {\r\n  font-family: Avenir Next, Helvetica Neue, Helvetica, sans-serif;\r\n}\r\n</style>\r\n"]}]}